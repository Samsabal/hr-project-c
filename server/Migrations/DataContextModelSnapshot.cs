// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.Data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server.Models.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("server.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3457195-1a5b-4897-b4eb-04662cfdd9ed"),
                            Country = "Netherlands (the)",
                            IsActive = true,
                            Name = "Viscon"
                        },
                        new
                        {
                            Id = new Guid("8b896eec-ee26-40f0-add7-691745f488e4"),
                            Country = "Netherlands (the)",
                            IsActive = true,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("server.Models.CompanyMachine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MachineId");

                    b.ToTable("CompanyMachines");
                });

            modelBuilder.Entity("server.Models.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("server.Models.Machine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlueprintNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("server.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("server.Models.Solution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("server.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionExpected")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActionPerformed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyMachineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IssueType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MachineId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Solution")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TicketNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyMachineId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("MachineId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("server.Models.Token", b =>
                {
                    b.Property<Guid>("TokenValue")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer");

                    b.HasKey("TokenValue", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("server.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cb1e8d4-b4ce-4e76-bcb1-3fd26c8c9af9"),
                            CompanyId = new Guid("a3457195-1a5b-4897-b4eb-04662cfdd9ed"),
                            Email = "root@viscon.nl",
                            FirstName = "Viscon",
                            IsActive = true,
                            LastName = "Admin",
                            PasswordHash = new byte[] { 79, 79, 112, 67, 105, 87, 253, 68, 160, 2, 118, 215, 146, 73, 30, 11, 88, 71, 209, 154, 133, 252, 203, 143, 139, 152, 170, 41, 239, 205, 241, 62, 48, 74, 41, 121, 194, 39, 69, 32, 178, 233, 47, 198, 29, 64, 88, 255, 88, 101, 63, 232, 163, 143, 208, 103, 91, 18, 170, 181, 82, 100, 68, 206 },
                            PasswordSalt = new byte[] { 121, 36, 168, 255, 188, 240, 113, 145, 106, 87, 208, 231, 97, 64, 24, 15, 203, 228, 41, 145, 183, 241, 212, 14, 106, 198, 225, 230, 147, 192, 233, 35, 139, 241, 225, 155, 26, 79, 153, 167, 120, 87, 40, 187, 15, 125, 103, 81, 111, 86, 73, 254, 11, 85, 158, 128, 192, 204, 122, 9, 60, 254, 211, 43, 194, 43, 206, 55, 244, 133, 164, 201, 213, 27, 216, 167, 163, 20, 222, 153, 79, 244, 185, 44, 139, 129, 118, 148, 236, 190, 115, 48, 136, 147, 24, 80, 151, 50, 47, 178, 252, 218, 85, 94, 26, 140, 221, 113, 103, 172, 39, 72, 113, 151, 101, 71, 237, 12, 89, 93, 91, 120, 210, 155, 34, 131, 152, 19 },
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("344266ee-f0b1-42eb-9d0d-0a298d23f388"),
                            CompanyId = new Guid("8b896eec-ee26-40f0-add7-691745f488e4"),
                            Email = "root@customer.nl",
                            FirstName = "Customer",
                            IsActive = true,
                            LastName = "Admin",
                            PasswordHash = new byte[] { 79, 79, 112, 67, 105, 87, 253, 68, 160, 2, 118, 215, 146, 73, 30, 11, 88, 71, 209, 154, 133, 252, 203, 143, 139, 152, 170, 41, 239, 205, 241, 62, 48, 74, 41, 121, 194, 39, 69, 32, 178, 233, 47, 198, 29, 64, 88, 255, 88, 101, 63, 232, 163, 143, 208, 103, 91, 18, 170, 181, 82, 100, 68, 206 },
                            PasswordSalt = new byte[] { 121, 36, 168, 255, 188, 240, 113, 145, 106, 87, 208, 231, 97, 64, 24, 15, 203, 228, 41, 145, 183, 241, 212, 14, 106, 198, 225, 230, 147, 192, 233, 35, 139, 241, 225, 155, 26, 79, 153, 167, 120, 87, 40, 187, 15, 125, 103, 81, 111, 86, 73, 254, 11, 85, 158, 128, 192, 204, 122, 9, 60, 254, 211, 43, 194, 43, 206, 55, 244, 133, 164, 201, 213, 27, 216, 167, 163, 20, 222, 153, 79, 244, 185, 44, 139, 129, 118, 148, 236, 190, 115, 48, 136, 147, 24, 80, 151, 50, 47, 178, 252, 218, 85, 94, 26, 140, 221, 113, 103, 172, 39, 72, 113, 151, 101, 71, 237, 12, 89, 93, 91, 120, 210, 155, 34, 131, 152, 19 },
                            Role = 4
                        });
                });

            modelBuilder.Entity("server.Models.Attachment", b =>
                {
                    b.HasOne("server.Models.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("server.Models.CompanyMachine", b =>
                {
                    b.HasOne("server.Models.Company", "Company")
                        .WithMany("CompanyMachines")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Machine", "Machine")
                        .WithMany("CompanyMachines")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("server.Models.Issue", b =>
                {
                    b.HasOne("server.Models.Machine", "Machine")
                        .WithMany("Issues")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("server.Models.Notification", b =>
                {
                    b.HasOne("server.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Solution", b =>
                {
                    b.HasOne("server.Models.Issue", "Issue")
                        .WithMany("Solutions")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("server.Models.Ticket", b =>
                {
                    b.HasOne("server.Models.User", "Assignee")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssigneeId");

                    b.HasOne("server.Models.Company", "Company")
                        .WithMany("Tickets")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.CompanyMachine", "CompanyMachine")
                        .WithMany("Tickets")
                        .HasForeignKey("CompanyMachineId");

                    b.HasOne("server.Models.User", "Creator")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Machine", null)
                        .WithMany("Tickets")
                        .HasForeignKey("MachineId");

                    b.Navigation("Assignee");

                    b.Navigation("Company");

                    b.Navigation("CompanyMachine");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("server.Models.Token", b =>
                {
                    b.HasOne("server.Models.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.User", b =>
                {
                    b.HasOne("server.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("server.Models.Company", b =>
                {
                    b.Navigation("CompanyMachines");

                    b.Navigation("Tickets");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("server.Models.CompanyMachine", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("server.Models.Issue", b =>
                {
                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("server.Models.Machine", b =>
                {
                    b.Navigation("CompanyMachines");

                    b.Navigation("Issues");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("server.Models.Ticket", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("server.Models.User", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("CreatedTickets");

                    b.Navigation("Notifications");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
